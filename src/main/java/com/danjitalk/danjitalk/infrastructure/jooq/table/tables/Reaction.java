/*
 * This file is generated by jOOQ.
 */
package com.danjitalk.danjitalk.infrastructure.jooq.table.tables;


import com.danjitalk.danjitalk.domain.community.reaction.enums.ReactionType;
import com.danjitalk.danjitalk.infrastructure.jooq.table.Danjitalk;
import com.danjitalk.danjitalk.infrastructure.jooq.table.Keys;
import com.danjitalk.danjitalk.infrastructure.jooq.table.tables.records.ReactionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reaction extends TableImpl<ReactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>danjitalk.reaction</code>
     */
    public static final Reaction REACTION = new Reaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReactionRecord> getRecordType() {
        return ReactionRecord.class;
    }

    /**
     * The column <code>danjitalk.reaction.id</code>.
     */
    public final TableField<ReactionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>danjitalk.reaction.reaction_type</code>.
     */
    public final TableField<ReactionRecord, ReactionType> REACTION_TYPE = createField(DSL.name("reaction_type"), SQLDataType.VARCHAR(4).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "", new AutoConverter<String, ReactionType>(String.class, ReactionType.class));

    /**
     * The column <code>danjitalk.reaction.feed_id</code>.
     */
    public final TableField<ReactionRecord, Long> FEED_ID = createField(DSL.name("feed_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>danjitalk.reaction.member_id</code>.
     */
    public final TableField<ReactionRecord, Long> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    private Reaction(Name alias, Table<ReactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reaction(Name alias, Table<ReactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>danjitalk.reaction</code> table reference
     */
    public Reaction(String alias) {
        this(DSL.name(alias), REACTION);
    }

    /**
     * Create an aliased <code>danjitalk.reaction</code> table reference
     */
    public Reaction(Name alias) {
        this(alias, REACTION);
    }

    /**
     * Create a <code>danjitalk.reaction</code> table reference
     */
    public Reaction() {
        this(DSL.name("reaction"), null);
    }

    public <O extends Record> Reaction(Table<O> child, ForeignKey<O, ReactionRecord> key) {
        super(child, key, REACTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Danjitalk.DANJITALK;
    }

    @Override
    public Identity<ReactionRecord, Long> getIdentity() {
        return (Identity<ReactionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReactionRecord> getPrimaryKey() {
        return Keys.KEY_REACTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<ReactionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_REACTION_UQ_FEED_MEMBER);
    }

    @Override
    public List<ForeignKey<ReactionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKHGEKJDM7K2IAB2NLTI5P99EU9);
    }

    private transient Feed _feed;

    /**
     * Get the implicit join path to the <code>danjitalk.feed</code> table.
     */
    public Feed feed() {
        if (_feed == null)
            _feed = new Feed(this, Keys.FKHGEKJDM7K2IAB2NLTI5P99EU9);

        return _feed;
    }

    @Override
    public Reaction as(String alias) {
        return new Reaction(DSL.name(alias), this);
    }

    @Override
    public Reaction as(Name alias) {
        return new Reaction(alias, this);
    }

    @Override
    public Reaction as(Table<?> alias) {
        return new Reaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reaction rename(String name) {
        return new Reaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reaction rename(Name name) {
        return new Reaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reaction rename(Table<?> name) {
        return new Reaction(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, ReactionType, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super ReactionType, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super ReactionType, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
